- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars/vars.yml
  tasks:
  - name: Download master node user data file
    get_url:
      url: https://raw.githubusercontent.com/mglantz/ocp311-aws/master/scripts/master-prep.sh
      dest: /tmp/master-prep.sh
      validate_certs: no
      force: yes
  - name: Download infra node user data file
    get_url:
      url: https://raw.githubusercontent.com/mglantz/ocp311-aws/master/scripts/infra-prep.sh
      dest: /tmp/infra-prep.sh
      validate_certs: no
      force: yes
  - name: Download gluster node user data file
    get_url:
      url: https://raw.githubusercontent.com/mglantz/ocp311-aws/master/scripts/gluster-prep.sh
      dest: /tmp/gluster-prep.sh
      validate_certs: no
      force: yes
  - name: Download app node user data file
    get_url:
      url: https://raw.githubusercontent.com/mglantz/ocp311-aws/master/scripts/app-prep.sh
      dest: /tmp/app-prep.sh
      validate_certs: no
      force: yes
  - name: Download bastion node user data file
    get_url:
      url: https://raw.githubusercontent.com/mglantz/ocp311-aws/master/scripts/app-prep.sh
      dest: /tmp/bastion-prep.sh
      validate_certs: no
      force: yes
  - name: Replace RHN user in user data files downloaded
    replace:
      path: "{{ item }}"
      regexp: "RHNUSER"
      replace: "{{ rhn_user }}"
    with_items:
      - /tmp/master-prep.sh
      - /tmp/infra-prep.sh
      - /tmp/app-prep.sh
      - /tmp/gluster-prep.sh
      - /tmp/bastion-prep.sh
  - name: Replace RHN pass in user data files downloaded
    replace:
      path: "{{ item }}"
      regexp: "RHNPASS"
      replace: "{{ rhn_pass }}"
    with_items:
      - /tmp/master-prep.sh
      - /tmp/infra-prep.sh
      - /tmp/app-prep.sh
      - /tmp/gluster-prep.sh
      - /tmp/bastion-prep.sh
  - name: Replace subscription pool id in user data files downloaded
    replace:
      path: "{{ item }}"
      regexp: "SUBPOOLID"
      replace: "{{ subscription_poolid }}"
    with_items:
      - /tmp/master-prep.sh
      - /tmp/infra-prep.sh
      - /tmp/app-prep.sh
      - /tmp/gluster-prep.sh
      - /tmp/bastion-prep.sh
  - name: Ensure a security group for demo is in place
    ec2_group:
      name: "{{ ec2_security_group }}"
      description: Security Group for demo
      region: "{{ ec2_region }}"
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8443
          to_port: 8443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
  - name: Provision bastion node
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: t2.medium
      image: "{{ ami_id }}"
      volumes:
      - device_name: /dev/sda1
        volume_size: 100
        volume_type: gp2
        delete_on_termination: true
      - device_name: /dev/xvdf
        volume_size: 100
        delete_on_termination: true
      user_data: "{{ lookup('file', '/tmp/bastion-prep.sh') }}"
      wait: true
      exact_count: 1
      count_tag:
        identity: bastion
      instance_tags:
        identity: bastion
    register: bastion 

  - name: Add bastion instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=bastion
    with_items: "{{ bastion.tagged_instances }}"

  - name: Print IP address of bastion server
    debug:
      msg: "{{ groups['bastion'] }}"

  - name: Provision Master nodes 
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: "{{ master_size }}"
      image: "{{ ami_id }}"
      volumes:
      - device_name: /dev/sda1
        volume_size: 100
        volume_type: gp2
        delete_on_termination: true
      - device_name: /dev/xvdf
        volume_size: 100
        delete_on_termination: true
      user_data: "{{ lookup('file', '/tmp/master-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_master_systems }}"
      count_tag:
        identity: master
      instance_tags:
        identity: master
    register: master

  - name: Add master instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=master
    with_items: "{{ master.tagged_instances }}"

  - name: Print IP address of master servers
    debug:
      msg: "{{ groups['master'] }}"

  - name: Provision Infra nodes
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: "{{ infra_size }}"
      image: "{{ ami_id }}"
      volumes:
      - device_name: /dev/sda1
        volume_size: 100
        volume_type: gp2
        delete_on_termination: true
      - device_name: /dev/xvdf
        volume_size: 100
        delete_on_termination: true
      user_data: "{{ lookup('file', '/tmp/infra-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_infra_systems }}"
      count_tag:
        identity: infra
      instance_tags:
        identity: infra
    register: infra

  - name: Add infra instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=infra
    with_items: "{{ infra.tagged_instances }}"

  - name: Print IP address of infra servers
    debug:
      msg: "{{ groups['infra'] }}"

  - name: Provision App nodes
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: "{{ app_size }}"
      image: "{{ ami_id }}"
      volumes:
      - device_name: /dev/sda1
        volume_size: 100
        volume_type: gp2
        delete_on_termination: true
      - device_name: /dev/xvdf
        volume_size: 100
        delete_on_termination: true
      user_data: "{{ lookup('file', '/tmp/app-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_app_systems }}"
      count_tag:
        identity: app
      instance_tags:
        identity: app
    register: app

  - name: Add app instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=app
    with_items: "{{ app.tagged_instances }}"

  - name: Print IP address of app servers
    debug:
      msg: "{{ groups['app'] }}"

  - name: Provision Gluster nodes
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: "{{ gluster_size }}"
      image: "{{ ami_id }}"
      volumes:  
      - device_name: /dev/sda1
        volume_size: 100     
        volume_type: gp2
        delete_on_termination: true
      - device_name: /dev/xvdf
        volume_size: 100
        delete_on_termination: true
      - device_name: /dev/xvdg
        volume_size: 100
        delete_on_termination: true
      user_data: "{{ lookup('file', '/tmp/gluster-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_gluster_systems }}"
      count_tag:
        identity: gluster
      instance_tags:
        identity: gluster
    register: gluster

  - name: Add gluster instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=gluster
    with_items: "{{ gluster.tagged_instances }}"

  - name: Print IP address of gluster servers
    debug:
      msg: "{{ groups['gluster'] }}"


